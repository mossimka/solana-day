"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const liquidity_controller_1 = require("../controllers/liquidity.controller");
const liquidity_bot_service_1 = require("../services/liquidity-bot.service");
const crypto_service_1 = require("../services/crypto.service");
const data_source_1 = require("../config/data-source");
const position_entity_1 = require("../entities/position.entity");
const session_wallet_entity_1 = require("../entities/session-wallet.entity");
const auth_middleware_1 = require("../middleware/auth.middleware");
const router = (0, express_1.Router)();
const positionRepository = data_source_1.AppDataSource.getRepository(position_entity_1.Position);
const sessionWalletRepository = data_source_1.AppDataSource.getRepository(session_wallet_entity_1.SessionWallet);
const cryptoService = new crypto_service_1.CryptoService();
const liquidityBotService = new liquidity_bot_service_1.LiquidityBotService(positionRepository, sessionWalletRepository, cryptoService);
const liquidityController = new liquidity_controller_1.LiquidityController(liquidityBotService);
router.post('/setup-position', auth_middleware_1.authMiddleware, (req, res) => liquidityController.setupLiquidityPosition(req, res));
router.post('/close-position', auth_middleware_1.authMiddleware, (req, res) => liquidityController.closeLiquidityPosition(req, res));
router.post('/setup-position-test', auth_middleware_1.authMiddleware, (req, res) => liquidityController.setupLiquidityPositionTest(req, res));
router.post('/close-position-test', auth_middleware_1.authMiddleware, (req, res) => liquidityController.closePositionTest(req, res));
router.get('/positions', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getAllPositionInfo(req, res));
router.get('/positions-with-details', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getAllPositionsWithDetails(req, res));
router.get('/position/:nftMint', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getPositionInfo(req, res));
router.get('/position-details/:positionId', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getPositionDetails(req, res));
router.get('/pool/:poolId', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getPoolInfo(req, res));
router.get('/pool/balance/:poolId', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getPoolBalance(req, res));
router.get('/token/price', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getTokenPrice(req, res));
router.get('/valid-pairs', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getValidPairs(req, res));
router.get('/high-apr-pools', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getHighAprPools(req, res));
router.get('/chart-data', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getChartData(req, res));
router.post('/private-key', auth_middleware_1.authMiddleware, (req, res) => liquidityController.savePrivateKey(req, res));
router.get('/active-wallet', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getActiveWallet(req, res));
router.get('/order-settings', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getOrderSettings(req, res));
router.post('/order-settings', auth_middleware_1.authMiddleware, (req, res) => liquidityController.setOrderSettings(req, res));
router.post('/hedge-preview', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getHedgePreview(req, res));
router.post('/recalculate-plan', auth_middleware_1.authMiddleware, (req, res) => liquidityController.recalculateHedgePlan(req, res));
router.post('/automated-range', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getAutomatedRange(req, res));
router.post('/start-hedge-simulation-for-existing', auth_middleware_1.authMiddleware, (req, res) => liquidityController.startHedgeSimulationForExisting(req, res));
router.post('/validate-delta-neutral', auth_middleware_1.authMiddleware, (req, res) => liquidityController.validateDeltaNeutralValue(req, res));
router.post('/positions/:positionId/enable-rebalance', auth_middleware_1.authMiddleware, (req, res) => liquidityController.enableRebalance(req, res));
router.post('/positions/:positionId/disable-rebalance', auth_middleware_1.authMiddleware, (req, res) => liquidityController.disableRebalance(req, res));
router.post('/binance/start', auth_middleware_1.authMiddleware, (req, res) => liquidityController.startBinance(req, res));
router.post('/binance/stop', auth_middleware_1.authMiddleware, (req, res) => liquidityController.stopBinance(req, res));
router.get('/futures/balance/:exchange', auth_middleware_1.authMiddleware, (req, res) => liquidityController.getFuturesAccountBalance(req, res));
router.get('/internal/active-for-hedging', (req, res) => liquidityController.getAllActiveForHedging(req, res));
router.post('/internal/rebalance-completed', (req, res) => liquidityController.handleRebalanceCompletion(req, res));
router.post('/internal/positions/:positionId/update-state', (req, res) => liquidityController.updateHedgeState(req, res));
exports.default = router;
